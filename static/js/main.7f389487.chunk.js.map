{"version":3,"sources":["logo.png","store/actions/loginAction.js","store/actions/actionTypes.js","components/Login.jsx","store/actions/employeeAction.js","utils/backend-rest-api.js","utils/app-utils.js","components/TableData.jsx","utils/date-utils.js","components/SearchBar.jsx","components/Filter.jsx","components/SortIcon.jsx","pages/employee/EmployeeList.jsx","container/App.js","serviceWorker.js","store/reducers/employeeReducer.js","store/reducers/loginReducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["module","exports","setIsLoggedIn","isLoggedIn","type","Login","state","username","password","login","props","onLogin","alert","Fragment","className","src","logo","alt","id","value","this","onChange","event","setState","target","onClick","Component","connect","dispatch","data","loginAction","getAllEmployeeList","Promise","resolve","reject","axios","create","baseURL","withCredentials","headers","Accept","get","then","response","employeeList","catch","error","sortData","colName","sortOder","sortedList","_","sortBy","toString","reverse","TableData","status","text","getStatus","find","renderData","map","item","key","name","date","dob","formate","moment","format","age","parseInt","amount","TotalAmount","toFixed","Math","max","split","length","formateAmount","salary","isActive","SearchBar","quickSearch","onSeacrh","quickSearchText","handleQuickSearch","placeholder","Filter","onFilter","filterText","handleFilter","SortIcon","isVisibleIcon","sortColName","getIcon","sortOrder","renderIcon","aria-hidden","handleSortTable","EmployeeList","empList","filterItems","tableHeader","defaultFilterItem","getEmployeeList","onGetEmployeeList","res","setEmployeeList","filteredEmployeeList","undefined","filter","toUpperCase","includes","sortedEmployeeList","filterByStatus","filterValue","sortTable","getOrderName","order","renderTableHeader","onLogout","employeeReducer","employeeAction","App","renderContent","loginReducer","Boolean","window","location","hostname","match","initialState","executeEmployeeList","action","executeLogin","reducers","combineReducers","persistConfig","storage","persistedReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,kC,wMCErCC,EAAgB,SAAAC,GACpB,MAAO,CACLC,KCDiB,QDEjBD,WAAYA,IEAVE,E,2MACJC,MAAQ,CACNC,SAAU,QACVC,SAAU,S,EAKZC,MAAQ,WACsB,UAAxB,EAAKH,MAAMC,UAAgD,UAAxB,EAAKD,MAAME,SAChD,EAAKE,MAAMC,SAAQ,GAEnBC,MAAM,gC,qHAIA,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,gBACb,yBAAKC,IAAKC,IAAMC,IAAI,SAASH,UAAU,YAEzC,6BACE,2BAAOA,UAAU,gBAAjB,cACA,2BACEI,GAAG,WACHd,KAAK,OACLe,MAAOC,KAAKd,MAAMC,SAClBc,SAAU,SAAAC,GAAK,OACb,EAAKC,SAAS,CAAEhB,SAAUe,EAAME,OAAOL,YAI7C,6BACE,2BAAOL,UAAU,gBAAjB,aACA,2BACEI,GAAG,WACHd,KAAK,WACLe,MAAOC,KAAKd,MAAME,SAClBa,SAAU,SAAAC,GAAK,OACb,EAAKC,SAAS,CAAEf,SAAUc,EAAME,OAAOL,YAI7C,6BACE,4BAAQM,QAAS,kBAAM,EAAKhB,UAA5B,gB,GA9CQiB,aA4DLC,cAAQ,MANI,SAAAC,GACzB,MAAO,CACLjB,QAAS,SAAAkB,GAAI,OAAID,EFpDA,SAAAC,GACnB,OAAO,SAAAD,GACLA,EAAS1B,EAAc2B,KEkDGC,CAAkBD,QAIjCF,CAAkCtB,G,iBCvDpC0B,EAAqB,WAChC,OAAO,SAAAH,GACL,OAAO,IAAII,SAAQ,SAACC,EAASC,GCThBC,IAAMC,OAAO,CAC1BC,QAAQ,8DAERC,iBAAiB,EACjBC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBDKbC,IAAI,YACJC,MAAK,SAAAC,GACJf,EAZD,CACLxB,KFH8B,qBEI9BwC,aAU+BD,EAASd,OAClCI,EAAQU,MAETE,OAAM,SAAAC,GACLZ,EAAOY,W,sCENV,SAASC,EAASlB,EAAMmB,EAASC,GACtC,IAAIC,EAAaC,IAAEC,OAAOvB,EAAM,CAACmB,IAKjC,MAH8B,SAA1B,CAACC,GAAUI,YACbH,EAAWI,UAENJ,E,ICmCMK,E,2MAjDbjD,MAAQ,CACNkD,OAAQ,CACN,CACEC,KAAM,SACND,QAAQ,GAEV,CACEC,KAAM,WACND,QAAQ,K,EAKdE,UAAY,SAAAF,GACV,IAAIlD,EAAQ6C,IAAEQ,KAAK,EAAKrD,MAAMkD,QAAQ,SAASrC,GAC7C,OAAOA,EAAMqC,SAAWA,KAE1B,GAAIlD,EACF,OAAOA,EAAMmD,M,EAIjBG,WAAa,WACX,OAAO,EAAKlD,MAAMmB,KAAKgC,KAAI,SAAAC,GAAI,OAC7B,wBAAIC,IAAKD,EAAK5C,IACZ,4BAAK4C,EAAKE,MACV,wBAAIlD,UAAU,gBC9BSmD,ED+BLH,EAAKI,IC/BMC,ED+BD,aC9B3BC,IAAOH,GAAMI,OAAOF,KDgCrB,wBAAIrD,UAAU,gBDzBKwD,ECyBqBR,EAAKQ,IDxB5CC,SAASD,KCyBV,wBAAIxD,UAAU,eDlCf,SAAuB0D,GAC5B,IAAIC,EAAcD,GAAkB,EAEpC,OAAOC,EAAYC,QACjBC,KAAKC,MAAMH,EAAc,IAAII,MAAM,KAAK,IAAM,IAAIC,OAAQ,IC8BzBC,CAAcjB,EAAKkB,SAChD,wBAAIlE,UAAWgD,EAAKmB,SAAW,eAAiB,kBAC7C,EAAKvB,UAAUI,EAAKmB,YD5BxB,IAAoBX,EERIL,EAAME,M,wED2CjC,OACE,kBAAC,IAAMtD,SAAP,KACGO,KAAKV,MAAMmB,MAAQT,KAAKV,MAAMmB,KAAKiD,OAAS,EACzC1D,KAAKwC,aACL,U,GA5CYlC,aEuBTwD,E,2MAzBb5E,MAAQ,CACN6E,YAAa,I,EAGfC,SAAW,SAAAC,GACT,EAAK9D,SAAS,CAAE4D,YAAaE,IAAmB,WAC9C,EAAK3E,MAAM4E,kBAAkBD,O,wEAIvB,IAAD,OACP,OACE,kBAAC,IAAMxE,SAAP,KACE,2BACET,KAAK,OACLe,MAAOC,KAAKd,MAAM6E,YAClBI,YAAY,oBACZzE,UAAU,gBACVO,SAAU,SAAAC,GAAK,OAAI,EAAK8D,SAAS9D,EAAME,OAAOL,e,GAnBhCO,aCkCT8D,E,2MAjCblF,MAAQ,CACN6E,YAAa,I,EAGfM,SAAW,SAAAC,GACT,EAAKnE,SAAS,CAAE4D,YAAaO,IAAc,WACzC,EAAKhF,MAAMiF,aAAaD,O,EAI5B9B,WAAa,WACX,OAAO,EAAKlD,MAAMmB,KAAKgC,KAAI,SAAAC,GAAI,OAC7B,4BAAQC,IAAKD,EAAK3C,MAAOA,MAAO2C,EAAK3C,OAClC2C,EAAKL,U,wEAKF,IAAD,OACP,OACE,kBAAC,IAAM5C,SAAP,KACE,4BACEC,UAAU,aACVO,SAAU,SAAAC,GAAK,OAAI,EAAKmE,SAASnE,EAAME,OAAOL,SAE7CC,KAAKV,MAAMmB,MAAQT,KAAKV,MAAMmB,KAAKiD,OAAS,EACzC1D,KAAKwC,aACL,W,GA5BOlC,aCwDNkE,E,2MAvDbtF,MAAQ,G,EAERuF,cAAgB,SAAA1E,GACd,OAAI,EAAKT,MAAMoF,YAAYzC,aAAelC,EAAMkC,Y,EAOlD0C,QAAU,WACR,OAAO,EAAKrF,MAAMsF,W,EAGpBC,WAAa,WACX,GAAI,EAAKvF,MAAMS,MACb,OAAI,EAAK0E,cAAc,EAAKnF,MAAMS,OAE9B,8BACiC,QAA9B,EAAK4E,UAAU1C,WACd,uBACEvC,UAAU,+BACVoF,cAAY,OACZzE,QAAS,kBACP,EAAKf,MAAMyF,gBAAgB,EAAKzF,MAAMS,MAAO,UAIjD,uBACEL,UAAU,iCACVoF,cAAY,OACZzE,QAAS,kBACP,EAAKf,MAAMyF,gBAAgB,EAAKzF,MAAMS,MAAO,YAQrD,uBACEL,UAAU,iCACVoF,cAAY,OACZzE,QAAS,kBAAM,EAAKf,MAAMyF,gBAAgB,EAAKzF,MAAMS,MAAO,Y,wEAQpE,OAAO,kBAAC,IAAMN,SAAP,KAAiBO,KAAK6E,kB,GApDVvE,aCQjB0E,E,2MACJ9F,MAAQ,CACN+F,QAAS,GAETC,YAAa,CACX,CAAE7C,KAAM,MAAOtC,MAAO,OACtB,CAAEsC,KAAM,SAAUtC,MAAO,UACzB,CAAEsC,KAAM,WAAYtC,MAAO,aAG7BoF,YAAa,CACX,CAAE9C,KAAM,OAAQtC,MAAO,QACvB,CAAEsC,KAAM,gBAAiBtC,MAAO,OAChC,CAAEsC,KAAM,MAAOtC,MAAO,OACtB,CAAEsC,KAAM,SAAUtC,MAAO,UACzB,CAAEsC,KAAM,SAAUtC,MAAO,WAG3BqF,kBAAmB,MAEnBV,YAAa,OAEbE,UAAW,O,EAObS,gBAAkB,WAChB,EAAK/F,MAAMgG,oBAAoBhE,MAAK,SAAAiE,GAClC,EAAKC,sB,EAITA,gBAAkB,WAChB,EAAKrF,SAAS,CACZ8E,QAAS,EAAK3F,MAAMkC,gB,EAIxB0C,kBAAoB,SAAAD,GAClB,IAAIwB,OAAuBC,EAC3B,OAAQ,EAAKxG,MAAMkG,mBACjB,IAAK,SACHK,EAAuB,EAAKnG,MAAMkC,aAAamE,QAC7C,SAAAjD,GAAI,OACFA,EAAKE,KAAKgD,cAAcC,SAAS5B,EAAgB2B,iBAC/B,IAAlBlD,EAAKmB,YAET,MACF,IAAK,WACH4B,EAAuB,EAAKnG,MAAMkC,aAAamE,QAC7C,SAAAjD,GAAI,OACFA,EAAKE,KAAKgD,cAAcC,SAAS5B,EAAgB2B,iBAC/B,IAAlBlD,EAAKmB,YAET,MACF,IAAK,MAKL,QACE4B,EAAuB,EAAKnG,MAAMkC,aAAamE,QAAO,SAAAjD,GAAI,OACxDA,EAAKE,KAAKgD,cAAcC,SAAS5B,EAAgB2B,kBAIvD,IAAIE,EAAqBnE,EACvB8D,EACA,EAAKvG,MAAMwF,YACX,EAAKxF,MAAM0F,WAEb,EAAKzE,SAAS,CAAE8E,QAASa,K,EAG3BC,eAAiB,SAAAC,GACf,IAAIP,OAAuBC,EAC3B,GAAIM,EAAa,CACf,OAAQA,GACN,IAAK,SACHP,EAAuB,EAAKnG,MAAMkC,aAAamE,QAC7C,SAAAjD,GAAI,OAAsB,IAAlBA,EAAKmB,YAEf,MACF,IAAK,WACH4B,EAAuB,EAAKnG,MAAMkC,aAAamE,QAC7C,SAAAjD,GAAI,OAAsB,IAAlBA,EAAKmB,YAEf,MACF,IAAK,MACH4B,EAAuB,EAAKnG,MAAMkC,aAClC,MACF,QACEiE,EAAuB,EAAKnG,MAAMkC,aAEtC,IAAIsE,EAAqBnE,EACvB8D,EACA,EAAKvG,MAAMwF,YACX,EAAKxF,MAAM0F,WAEb,EAAKzE,SAAS,CACZiF,kBAAmBY,EACnBf,QAASa,M,EAKfG,UAAY,SAACvB,EAAaE,GACxB,GAAI,EAAK1F,MAAM+F,QAAQvB,OAAS,EAAG,CACjC,IAAIoC,EAAqBnE,EACvB,EAAKzC,MAAM+F,QACXP,EACAE,GAEF,EAAKzE,SAAS,CACZ8E,QAASa,EACTpB,YAAaA,EACbE,UAAW,EAAKsB,aAAatB,O,EAKnCsB,aAAe,SAAAtB,GACb,IAAIuB,EAAQ,MAMZ,MAL6B,QAAzBvB,EAAU3C,WACZkE,EAAQ,OAC0B,SAAzBvB,EAAU3C,aACnBkE,EAAQ,OAEHA,G,EAGTC,kBAAoB,WAClB,OAAO,EAAKlH,MAAMiG,YAAY1C,KAAI,SAAAC,GAAI,OACpC,wBAAIC,IAAKD,EAAK3C,OACX2C,EAAKL,KAAM,IACe,WAA1BK,EAAK3C,MAAMkC,WAA0B,KACpC,kBAAC,EAAD,CACElC,MAAO2C,EAAK3C,MACZ2E,YAAa,EAAKxF,MAAMwF,YACxBE,UAAW,EAAK1F,MAAM0F,UACtBG,gBAAiB,EAAKkB,iB,mFArH9BjG,KAAKqF,oB,+BA4HG,IAAD,OACP,OACE,kBAAC,IAAM5F,SAAP,KACE,yBAAKC,UAAU,aACb,6BACE,4BACE,0BAAMA,UAAU,aAAhB,kBAEF,4BAAQA,UAAU,SAASW,QAAS,kBAAM,EAAKf,MAAM+G,aAArD,WAIF,6BATF,IASS,6BACP,6BACA,6BACE,0BAAM3G,UAAU,aACd,kBAAC,EAAD,CAAWwE,kBAAmBlE,KAAKkE,qBAErC,0BAAMxE,UAAU,cACd,6CAA0B,IAC1B,kBAAC,EAAD,CACEe,KAAMT,KAAKd,MAAMgG,YACjBX,aAAcvE,KAAK+F,mBAIzB,6BACE,+BACE,+BACE,4BAAK/F,KAAKoG,sBAEZ,+BACE,kBAAC,EAAD,CAAW3F,KAAMT,KAAKd,MAAM+F,mB,GAtLjB3E,aA+MZC,eAfS,SAAArB,GACtB,MAAO,CACLsC,aAActC,EAAMoH,gBAAgB9E,aAChCtC,EAAMoH,gBAAgB9E,aACtB,OAImB,SAAAhB,GACzB,MAAO,CACL8E,kBAAmB,kBAAM9E,EAAS+F,MAClCF,SAAU,kBAAM7F,GXrMX,SAAAA,GACLA,EAAS1B,GAAc,WWwMZyB,CAA6CyE,GCpNtDwB,E,2MACJC,cAAgB,WACd,OAA8B,IAA1B,EAAKnH,MAAMP,WAEX,yBAAKW,UAAU,OACb,kBAAC,EAAD,OAKF,yBAAKA,UAAU,OACb,kBAAC,EAAD,Q,wEAON,OAAO,kBAAC,IAAMD,SAAP,KAAiBO,KAAKyG,qB,GAlBfnG,aAiCHC,eAZS,SAAArB,GACtB,MAAO,CACLH,WAAYG,EAAMwH,aAAa3H,WAC3BG,EAAMwH,aAAa3H,WACnB,OAImB,SAAAyB,GACzB,MAAO,KAGMD,CAA6CiG,GC1BxCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0RChBN,IAAMC,EAAe,CACnBxF,aAAc,IAYVyF,EAAsB,SAAC/H,EAAOgI,GAClC,O,yVAAO,CAAP,GACKhI,EADL,CAEEsC,aAAc0F,EAAO1F,gBAIV8E,EAhBS,WAAmC,IAAlCpH,EAAiC,uDAAzB8H,EAAcE,EAAW,uCACxD,OAAQA,EAAOlI,MACb,IbN8B,qBaO5B,OAAOiI,EAAoB/H,EAAOgI,GACpC,QACE,OAAOhI,I,8NCTb,IAAM8H,EAAe,CACnBjI,YAAY,GAYRoI,EAAe,SAACjI,EAAOgI,GAC3B,O,yVAAO,IACFhI,EADL,CAEEH,WAAYmI,EAAOnI,cAIR2H,EAhBM,WAAmC,IAAlCxH,EAAiC,uDAAzB8H,EAAcE,EAAW,uCACrD,OAAQA,EAAOlI,MACb,IdLiB,QcMf,OAAOmI,EAAajI,EAAOgI,GAC7B,QACE,OAAOhI,ICHEkI,EAFEC,YAAgB,CAAEf,kBAAiBI,iBCC9CY,EAAgB,CACpB3E,IAAK,aACL4E,aAGIC,EAAmBC,YAAeH,EAAeI,GAE1CC,EAAQC,YAAYJ,EAAkBK,YAAgBC,MACtDC,EAAYC,YAAaL,G,MCFtCM,IAASC,OACP,kBAAC,IAAD,CAAeP,MAAOA,GACpB,kBAAC,cAAD,CAAaQ,QAAS,KAAMJ,UAAWA,GACrC,kBAAC,EAAD,QAGJK,SAASC,eAAe,SL8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlH,MAAK,SAAAmH,GACjCA,EAAaC,kB","file":"static/js/main.7f389487.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c5135656.png\";","import { LOGIN } from \"./actionTypes\";\r\n\r\nconst setIsLoggedIn = isLoggedIn => {\r\n  return {\r\n    type: LOGIN,\r\n    isLoggedIn: isLoggedIn\r\n  };\r\n};\r\n\r\nexport const login = data => {\r\n  return dispatch => {\r\n    dispatch(setIsLoggedIn(data));\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  return dispatch => {\r\n    dispatch(setIsLoggedIn(false));\r\n  };\r\n};\r\n","//Employee Action Types\r\n\r\nexport const GET_EMPLOYEES_LIST = \"GET_EMPLOYEES_LIST\";\r\nexport const LOGIN = \"LOGIN\";\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport logo from \"./../logo.png\";\r\nimport * as loginAction from \"../store/actions/loginAction\";\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    username: \"admin\",\r\n    password: \"admin\"\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  login = () => {\r\n    if (this.state.username === \"admin\" && this.state.password === \"admin\") {\r\n      this.props.onLogin(true);\r\n    } else {\r\n      alert(\"wrong username and password\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"loginContainer\">\r\n          <div className=\"imgcontainer\">\r\n            <img src={logo} alt=\"Avatar\" className=\"avatar\" />\r\n          </div>\r\n          <div>\r\n            <label className=\"headingLabel\">User Name:</label>\r\n            <input\r\n              id=\"username\"\r\n              type=\"text\"\r\n              value={this.state.username}\r\n              onChange={event =>\r\n                this.setState({ username: event.target.value })\r\n              }\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"headingLabel\">Password:</label>\r\n            <input\r\n              id=\"password\"\r\n              type=\"password\"\r\n              value={this.state.password}\r\n              onChange={event =>\r\n                this.setState({ password: event.target.value })\r\n              }\r\n            />\r\n          </div>\r\n          <div>\r\n            <button onClick={() => this.login()}>Login</button>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onLogin: data => dispatch(loginAction.login(data))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n","import { GET_EMPLOYEES_LIST } from \"./actionTypes\";\r\nimport api from \"../../utils/backend-rest-api\";\r\n\r\nconst setEmployeeList = employeeList => {\r\n  return {\r\n    type: GET_EMPLOYEES_LIST,\r\n    employeeList: employeeList\r\n  };\r\n};\r\n\r\nexport const getAllEmployeeList = () => {\r\n  return dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n      api()\r\n        .get(\"employee\")\r\n        .then(response => {\r\n          dispatch(setEmployeeList(response.data));\r\n          resolve(response);\r\n        })\r\n        .catch(error => {\r\n          reject(error);\r\n        });\r\n    });\r\n  };\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport default () => {\r\n  let instance = axios.create({\r\n    baseURL: `https://f995bad5-fb03-44cb-b04a-9492384bac4a.mock.pstmn.io/`,\r\n\r\n    withCredentials: false,\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  });\r\n  return instance;\r\n};\r\n","import _ from \"lodash\";\r\n\r\nexport function formateAmount(amount) {\r\n  let TotalAmount = amount ? amount : 0;\r\n\r\n  return TotalAmount.toFixed(\r\n    Math.max(((TotalAmount + \"\").split(\".\")[1] || \"\").length, 2)\r\n  );\r\n}\r\n\r\nexport function formateAge(age) {\r\n  return parseInt(age);\r\n}\r\n\r\nexport function sortData(data, colName, sortOder) {\r\n  let sortedList = _.sortBy(data, [colName]);\r\n\r\n  if ([sortOder].toString() === \"desc\") {\r\n    sortedList.reverse();\r\n  }\r\n  return sortedList;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { getFormateDate } from \"../utils/date-utils\";\r\nimport { formateAmount, formateAge } from \"../utils/app-utils\";\r\nimport _ from \"lodash\";\r\n\r\nclass TableData extends Component {\r\n  state = {\r\n    status: [\r\n      {\r\n        text: \"Active\",\r\n        status: true\r\n      },\r\n      {\r\n        text: \"Inactive\",\r\n        status: false\r\n      }\r\n    ]\r\n  };\r\n\r\n  getStatus = status => {\r\n    let state = _.find(this.state.status, function(value) {\r\n      return value.status === status;\r\n    });\r\n    if (state) {\r\n      return state.text;\r\n    }\r\n  };\r\n\r\n  renderData = () => {\r\n    return this.props.data.map(item => (\r\n      <tr key={item.id}>\r\n        <td>{item.name}</td>\r\n        <td className=\"numberStyle\">\r\n          {getFormateDate(item.dob, \"DD-MM-YYYY\")}\r\n        </td>\r\n        <td className=\"numberStyle\">{formateAge(item.age)}</td>\r\n        <td className=\"numberStyle\">{formateAmount(item.salary)}</td>\r\n        <td className={item.isActive ? \"activeStatus\" : \"inactiveStatus\"}>\r\n          {this.getStatus(item.isActive)}\r\n        </td>\r\n      </tr>\r\n    ));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.data && this.props.data.length > 0\r\n          ? this.renderData()\r\n          : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableData;\r\n","import moment from \"moment\";\r\n\r\nexport function getFormateDate(date, formate) {\r\n  return moment(date).format(formate);\r\n}\r\n\r\nexport function getCurrentDate(formate) {\r\n  return moment(new Date()).format(formate);\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  state = {\r\n    quickSearch: \"\"\r\n  };\r\n\r\n  onSeacrh = quickSearchText => {\r\n    this.setState({ quickSearch: quickSearchText }, () => {\r\n      this.props.handleQuickSearch(quickSearchText);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.quickSearch}\r\n          placeholder=\"Search By Name...\"\r\n          className=\"searchTextBox\"\r\n          onChange={event => this.onSeacrh(event.target.value)}\r\n        ></input>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Filter extends Component {\r\n  state = {\r\n    quickSearch: \"\"\r\n  };\r\n\r\n  onFilter = filterText => {\r\n    this.setState({ quickSearch: filterText }, () => {\r\n      this.props.handleFilter(filterText);\r\n    });\r\n  };\r\n\r\n  renderData = () => {\r\n    return this.props.data.map(item => (\r\n      <option key={item.value} value={item.value}>\r\n        {item.text}\r\n      </option>\r\n    ));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <select\r\n          className=\"width30per\"\r\n          onChange={event => this.onFilter(event.target.value)}\r\n        >\r\n          {this.props.data && this.props.data.length > 0\r\n            ? this.renderData()\r\n            : null}\r\n        </select>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SortIcon extends Component {\r\n  state = {};\r\n\r\n  isVisibleIcon = value => {\r\n    if (this.props.sortColName.toString() === value.toString()) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  getIcon = () => {\r\n    return this.props.sortOrder;\r\n  };\r\n\r\n  renderIcon = () => {\r\n    if (this.props.value) {\r\n      if (this.isVisibleIcon(this.props.value)) {\r\n        return (\r\n          <span>\r\n            {this.getIcon().toString() === \"asc\" ? (\r\n              <i\r\n                className=\"fa fa-long-arrow-up sortIcon\"\r\n                aria-hidden=\"true\"\r\n                onClick={() =>\r\n                  this.props.handleSortTable(this.props.value, \"asc\")\r\n                }\r\n              />\r\n            ) : (\r\n              <i\r\n                className=\"fa fa-long-arrow-down sortIcon\"\r\n                aria-hidden=\"true\"\r\n                onClick={() =>\r\n                  this.props.handleSortTable(this.props.value, \"desc\")\r\n                }\r\n              />\r\n            )}\r\n          </span>\r\n        );\r\n      } else {\r\n        return (\r\n          <i\r\n            className=\"fa fa-long-arrow-down sortIcon\"\r\n            aria-hidden=\"true\"\r\n            onClick={() => this.props.handleSortTable(this.props.value, \"desc\")}\r\n          />\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <React.Fragment>{this.renderIcon()}</React.Fragment>;\r\n  }\r\n}\r\n\r\nexport default SortIcon;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as employeeAction from \"../../store/actions/employeeAction\";\r\nimport * as loginAction from \"../../store/actions/loginAction\";\r\nimport TableData from \"../../components/TableData\";\r\nimport SearchBar from \"../../components/SearchBar\";\r\nimport Filter from \"../../components/Filter\";\r\nimport SortIcon from \"../../components/SortIcon\";\r\nimport { sortData } from \"../../utils/app-utils\";\r\n\r\nclass EmployeeList extends Component {\r\n  state = {\r\n    empList: [],\r\n\r\n    filterItems: [\r\n      { text: \"All\", value: \"all\" },\r\n      { text: \"Active\", value: \"active\" },\r\n      { text: \"Inactive\", value: \"inactive\" }\r\n    ],\r\n\r\n    tableHeader: [\r\n      { text: \"Name\", value: \"name\" },\r\n      { text: \"Date of Birth\", value: \"dob\" },\r\n      { text: \"Age\", value: \"age\" },\r\n      { text: \"Salary\", value: \"salary\" },\r\n      { text: \"Status\", value: \"status\" }\r\n    ],\r\n\r\n    defaultFilterItem: \"all\",\r\n\r\n    sortColName: \"name\",\r\n\r\n    sortOrder: \"asc\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getEmployeeList();\r\n  }\r\n\r\n  getEmployeeList = () => {\r\n    this.props.onGetEmployeeList().then(res => {\r\n      this.setEmployeeList();\r\n    });\r\n  };\r\n\r\n  setEmployeeList = () => {\r\n    this.setState({\r\n      empList: this.props.employeeList\r\n    });\r\n  };\r\n\r\n  handleQuickSearch = quickSearchText => {\r\n    let filteredEmployeeList = undefined;\r\n    switch (this.state.defaultFilterItem) {\r\n      case \"active\":\r\n        filteredEmployeeList = this.props.employeeList.filter(\r\n          item =>\r\n            item.name.toUpperCase().includes(quickSearchText.toUpperCase()) &&\r\n            item.isActive === true\r\n        );\r\n        break;\r\n      case \"inactive\":\r\n        filteredEmployeeList = this.props.employeeList.filter(\r\n          item =>\r\n            item.name.toUpperCase().includes(quickSearchText.toUpperCase()) &&\r\n            item.isActive === false\r\n        );\r\n        break;\r\n      case \"all\":\r\n        filteredEmployeeList = this.props.employeeList.filter(item =>\r\n          item.name.toUpperCase().includes(quickSearchText.toUpperCase())\r\n        );\r\n        break;\r\n      default:\r\n        filteredEmployeeList = this.props.employeeList.filter(item =>\r\n          item.name.toUpperCase().includes(quickSearchText.toUpperCase())\r\n        );\r\n        break;\r\n    }\r\n    let sortedEmployeeList = sortData(\r\n      filteredEmployeeList,\r\n      this.state.sortColName,\r\n      this.state.sortOrder\r\n    );\r\n    this.setState({ empList: sortedEmployeeList });\r\n  };\r\n\r\n  filterByStatus = filterValue => {\r\n    let filteredEmployeeList = undefined;\r\n    if (filterValue) {\r\n      switch (filterValue) {\r\n        case \"active\":\r\n          filteredEmployeeList = this.props.employeeList.filter(\r\n            item => item.isActive === true\r\n          );\r\n          break;\r\n        case \"inactive\":\r\n          filteredEmployeeList = this.props.employeeList.filter(\r\n            item => item.isActive === false\r\n          );\r\n          break;\r\n        case \"all\":\r\n          filteredEmployeeList = this.props.employeeList;\r\n          break;\r\n        default:\r\n          filteredEmployeeList = this.props.employeeList;\r\n      }\r\n      let sortedEmployeeList = sortData(\r\n        filteredEmployeeList,\r\n        this.state.sortColName,\r\n        this.state.sortOrder\r\n      );\r\n      this.setState({\r\n        defaultFilterItem: filterValue,\r\n        empList: sortedEmployeeList\r\n      });\r\n    }\r\n  };\r\n\r\n  sortTable = (sortColName, sortOrder) => {\r\n    if (this.state.empList.length > 0) {\r\n      let sortedEmployeeList = sortData(\r\n        this.state.empList,\r\n        sortColName,\r\n        sortOrder\r\n      );\r\n      this.setState({\r\n        empList: sortedEmployeeList,\r\n        sortColName: sortColName,\r\n        sortOrder: this.getOrderName(sortOrder)\r\n      });\r\n    }\r\n  };\r\n\r\n  getOrderName = sortOrder => {\r\n    let order = \"asc\";\r\n    if (sortOrder.toString() === \"asc\") {\r\n      order = \"desc\";\r\n    } else if (sortOrder.toString() === \"desc\") {\r\n      order = \"asc\";\r\n    }\r\n    return order;\r\n  };\r\n\r\n  renderTableHeader = () => {\r\n    return this.state.tableHeader.map(item => (\r\n      <th key={item.value}>\r\n        {item.text}{\" \"}\r\n        {item.value.toString() === \"status\" ? null : (\r\n          <SortIcon\r\n            value={item.value}\r\n            sortColName={this.state.sortColName}\r\n            sortOrder={this.state.sortOrder}\r\n            handleSortTable={this.sortTable}\r\n          ></SortIcon>\r\n        )}\r\n      </th>\r\n    ));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <div>\r\n            <h2>\r\n              <span className=\"floatLeft\">Employee List</span>\r\n            </h2>\r\n            <button className=\"logout\" onClick={() => this.props.onLogout()}>\r\n              Logout\r\n            </button>\r\n          </div>\r\n          <br /> <br />\r\n          <br />\r\n          <div>\r\n            <span className=\"left-half\">\r\n              <SearchBar handleQuickSearch={this.handleQuickSearch}></SearchBar>\r\n            </span>\r\n            <span className=\"right-half\">\r\n              <label>Filter By:</label>{\" \"}\r\n              <Filter\r\n                data={this.state.filterItems}\r\n                handleFilter={this.filterByStatus}\r\n              ></Filter>\r\n            </span>\r\n          </div>\r\n          <div>\r\n            <table>\r\n              <thead>\r\n                <tr>{this.renderTableHeader()}</tr>\r\n              </thead>\r\n              <tbody>\r\n                <TableData data={this.state.empList}></TableData>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    employeeList: state.employeeReducer.employeeList\r\n      ? state.employeeReducer.employeeList\r\n      : []\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onGetEmployeeList: () => dispatch(employeeAction.getAllEmployeeList()),\r\n    onLogout: () => dispatch(loginAction.logout())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeList);\r\n","import React, { Component } from \"react\";\r\nimport Login from \"../components/Login\";\r\nimport { connect } from \"react-redux\";\r\nimport EmployeeList from \"../pages/employee/EmployeeList\";\r\n\r\nclass App extends Component {\r\n  renderContent = () => {\r\n    if (this.props.isLoggedIn === true) {\r\n      return (\r\n        <div className=\"App\">\r\n          <EmployeeList />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\">\r\n          <Login />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <React.Fragment>{this.renderContent()}</React.Fragment>;\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoggedIn: state.loginReducer.isLoggedIn\r\n      ? state.loginReducer.isLoggedIn\r\n      : []\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  employeeList: []\r\n};\r\n\r\nconst employeeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_EMPLOYEES_LIST:\r\n      return executeEmployeeList(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst executeEmployeeList = (state, action) => {\r\n  return {\r\n    ...state,\r\n    employeeList: action.employeeList\r\n  };\r\n};\r\n\r\nexport default employeeReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n};\r\n\r\nconst loginReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.LOGIN:\r\n      return executeLogin(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst executeLogin = (state, action) => {\r\n  return {\r\n    ...state,\r\n    isLoggedIn: action.isLoggedIn\r\n  };\r\n};\r\n\r\nexport default loginReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\n//import Reducers\r\nimport employeeReducer from \"./employeeReducer\";\r\nimport loginReducer from \"./loginReducer\";\r\n\r\nconst reducers = combineReducers({ employeeReducer, loginReducer });\r\n\r\nexport default reducers;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst persistConfig = {\r\n  key: \"circle-app\",\r\n  storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(persistedReducer, applyMiddleware(thunk));\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\n\r\nimport App from \"./container/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { Provider as StoreProvider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\r\nimport { persistor, store } from \"./store\";\r\n\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\n\r\nReactDOM.render(\r\n  <StoreProvider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </StoreProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}